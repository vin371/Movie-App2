import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import MovieSection from '../components/MovieSection';
import { searchMovies, transformMovieData } from '../services/movieService';
import { fallbackHotMovies } from '../data/movieData';

const SearchResults = () => {
  const location = useLocation();
  const [searchResults, setSearchResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [query, setQuery] = useState('');

  useEffect(() => {
    // L·∫•y query t·ª´ URL params
    const urlParams = new URLSearchParams(location.search);
    const searchQuery = urlParams.get('q');
    
    if (searchQuery) {
      setQuery(searchQuery);
      performSearch(searchQuery);
    }
  }, [location.search]);

  // H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
  function removeVietnameseTones(str) {
    return str
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/ƒë/g, 'd').replace(/ƒê/g, 'D');
  }

  const performSearch = async (searchQuery) => {
    if (!searchQuery.trim()) return;
    try {
      setLoading(true);
      setError(null);

      // G·ªçi API TMDB
      const response = await searchMovies(searchQuery, 1);

      // Chu·∫©n h√≥a chu·ªói t√¨m ki·∫øm v√† t√™n phim v·ªÅ kh√¥ng d·∫•u, kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng
      const normalizedQuery = removeVietnameseTones(searchQuery).toLowerCase();
      const filtered = (response.results || []).filter(movie =>
        removeVietnameseTones(movie.title || '').toLowerCase().includes(normalizedQuery)
      );
      console.log('K·∫øt qu·∫£ t√¨m ki·∫øm t·ª´ API:', filtered);
      setSearchResults(filtered);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t√¨m ki·∫øm phim. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const searchStyles = {
    container: {
      padding: '40px 20px',
      maxWidth: '1400px',
      margin: '0 auto',
    },
    loadingContainer: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      height: '200px',
      fontSize: '18px',
      color: '#666',
    },
    errorContainer: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      height: '200px',
      fontSize: '18px',
      color: '#e74c3c',
      background: '#fdf2f2',
      borderRadius: '10px',
      margin: '20px 0',
    },
    noResults: {
      textAlign: 'center',
      padding: '60px 20px',
      color: '#666',
    },
    noResultsTitle: {
      fontSize: '24px',
      marginBottom: '15px',
      color: '#333',
    },
    noResultsText: {
      fontSize: '16px',
      lineHeight: '1.6',
    },
  };

  return (
    <div style={searchStyles.container}>
 
      

      {/* Loading State */}
      {loading && (
        <div style={searchStyles.loadingContainer}>
          üé¨ ƒêang t√¨m ki·∫øm phim...
        </div>
      )}

      {/* Error State */}
      {error && (
        <div style={searchStyles.errorContainer}>
          ‚ùå {error}
        </div>
      )}

      {/* No Results */}
      {!loading && !error && query && searchResults.length === 0 && (
        <div style={searchStyles.noResults}>
          <h3 style={searchStyles.noResultsTitle}>Kh√¥ng t√¨m th·∫•y phim n√†o</h3>
          <p style={searchStyles.noResultsText}>
            Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o cho t·ª´ kh√≥a "{query}".<br />
            H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c.
          </p>
        </div>
      )}

      {/* Search Results */}
      {!loading && !error && searchResults.length > 0 && (
        <MovieSection 
          title={`üé¨ Phim T√¨m ƒê∆∞·ª£c: "${query}"`}
          movies={searchResults} 
        />
      )}
    </div>
  );
};

export default SearchResults;
